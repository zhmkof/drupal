<?php
// $Id$
/**
* @file
* Role access module file.
*
* Provides a simple content access scheme based on the
* author's role.
*/

/**
* Implement hook_node_access_records().
*
* We want to store a row for each role assigned
* to the author of the content.
*
*/
function role_access_node_access_records($node) {
	// First get the user record. Note that we avoid using $user here,
	// since that is the global $user object.
	$account = user_load($node->uid);
	// Now, get the roles array from the $account object.
	$roles = array_keys($account->roles);
	// Initialize a $grants array.
	$grants = array();
	// Iterate through the $roles and get our grants.
	// We use the role id as the grant id, so let's name it that way for clarity.
	foreach ($roles as $grant_id) {
		$grants[] = array(
			'realm' => 'role_access', // The name of our module.
			'gid' => $grant_id,
			'grant_view' => 1,
			'grant_update' => 1,
			'grant_delete' => 1,
			'priority' => 0, // If not zero, other grants are ignored.
		);
	}
	// Return our grants.
	return $grants;
}

/**
* Implement hook_node_grants().
*/
function role_access_node_grants($account, $op) {
	// Get the user roles.
	$roles = array_keys($account->roles);
	// Error checking.
	if (empty($roles)) {
		return array();
	}
	// Initialize a $grants array.
	$grants = array();
	// Iterate through the roles.
	foreach ($roles as $grant_id) {
		// Check the permission callback!
		if (user_access($op . ' role access content')) {
			$grants['role_access'][] = $grant_id;
		}
	}
	// Return the grants.
	return $grants;
}

/**
* Implement hook_permission().
*
* Define our modules permissions as follows:
* -- view role access content
* -- update role access content
* -- delete role access content
*
* Naming these properly helps avoid conflicts with other modules.
* Note that we name these based on the $op value passed by
* hook_node_grants(). This allows us to use string concatenation
* when doing our access check.
*/
function role_access_permission() {
	return array(
		'view role access content' => array(
			'title' => t('View role-restricted content'),
			'description' => t('Allow users to view content assigned byrole.'),
		),
		'update role access content' => array(
			'title' => t('Edit role-restricted content'),
			'description' => t('Allow users to edit content assigned by role.'),
		),
		'delete role access content' => array(
			'title' => t('Delete role-restricted content'),
			'description' => t('Allow users to delete content assigned by role.'),
		),
	);
}

/**
* Implement hook_node_access_explain().
*/
function role_access_node_access_explain($row) {
	// If not our grant, ignore.(realm:领域、范围)
	if ($row->realm != 'role_access') {
		return NULL;
	}
	// Get a list of user roles.
	$roles = user_roles();
	// Get our permission definitions.
	$permissions = role_access_permission();
	// Initiate a results variable, for theming the output.
	$results = array();
	// Check each access rule.
	foreach (array('view', 'update', 'delete') as $op) {
		if (in_array($row->gid, array_keys($roles))) {
			$results[] = t(
						'%roles with the permission %perm may %op this content',
						array(
							'%role' => $roles[$row->gid],
							'%perm' => $permissions[$op . ' role access content']['title'], '%op' => $op
						)
			);
		}
	}
	// Prepare for theming. The $results are already secure, having run
	// through t().
	$variables = array(
		'items' => $results,
		'title' => '',
		'type' => 'ul',
	);
	// Return a nicely themed list.
	return theme('item_list', $variables);
}

