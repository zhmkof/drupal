<?php

/**
* Implements hook_entity_info().
* 描述entity type
*/
function artwork_entity_info() {
	$return['artwork'] = array(
		'label' => t('Artwork'),//the name should be show to the user
		'controller class' => 'ArtworkController',
		'base table' => 'artwork',//主表
		'revision table' => 'artwork_revision',//存储版本列表
		'uri callback' => 'artwork_uri',
		'fieldable' => TRUE,
		'entity keys' => array(
			'id' => 'aid',//主表主键
			'revision' => 'vid',//版本列表主键
			'bundle' => 'type',//表示每个bundle的主键
			'label' => 'title',//artwork的显示名字
		),
		'bundle keys' => array(
			'bundle' => 'type',
		),
		'static cache' => TRUE,
		'bundles' => array(),
		'view modes' => array(//entity的不同显示模式
			'full' => array(
				'label' => t('Full content'),
				'custom settings' => FALSE,//是否允许Field UI为默认显示模式分别配置格式化字段
			),
			'teaser' => array(
				'label' => t('Teaser'),
				'custom settings' => FALSE,
			),
		),
	);
	foreach (artwork_types() as $type => $info) {
		$return['artwork']['bundles'][$type] = array(
			'label' => $info -> name,
			'admin' => array(
				'path' => 'admin/structure/artworks/manage/%artwork_type',
				'real path' => 'admin/structure/artworks/manage/' . str_replace('_', '-', $type),
				'bundle argument' => 4,
				'access arguments' => array('administer artworks'),
			),
		);
	}
	return $return;//$return has a single entry, artwork
}


function artwork_uri($artwork) {
	return array(
		'path' => 'artwork/' . $artwork->aid,
	);
}

/**
 * artwork type object必须：
 * 		a.是一个对象
 * 		b.与hook_entity_info()里定义的bundle键匹配
 */
function artwork_types() {
	$types = &drupal_static(__FUNCTION__);
	if (empty($types)) {
		$types['painting'] = (object)array(
			'type' => 'painting',
			'name' => t('Painting'),
			'description' => t('A picture made with paint.')
		);
		$types['sculpture'] = (object)array(
			'type' => 'sculpture',
			'name' => t('Sculpture'),
			'description' => t('A carving made out of stone or wood.')
		);
	}
	return $types;//artwork类型对象列表(stdClass PHP object，包含每个bundle的相关信息)
}
/**
 * 菜单placeholder工作的必要函数
 */
function artwork_type_load($type) {
	$types = artwork_types();
	$type = str_replace('-', '_', $type);
	return isset($types[$type]) ? $types[$type] : FALSE;
}

function artwork_load($aid = NULL, $vid = NULL, $reset = FALSE) {
	$aids = (isset($aid) ? array($aid) : array());
	$conditions = (isset($vid) ? array('vid' => $vid) : array());
	$artwork = artwork_load_multiple($aids, $conditions, $reset);
	return $artwork ? reset($artwork) : FALSE;
}
function artwork_load_multiple($aids = array(), $conditions = array(), $reset = FALSE) {
	return entity_load('artwork', $aids, $conditions, $reset);
}

function artwork_menu() {
	$item['artwork/recent'] = array(
		'title' => 'Recently added artworks',
		'page callback' => 'artwork_page_list_recent',
		//如果没定义access callback，系统会调用user_access函数代替
		'access arguments' => array('view artworks'),//view artworks是权限名称？
		'file' => 'artwork.pages.inc',
	);

	$items['artwork/add'] = array(
		'title' => 'Add new artwork',
		'page callback' => 'artwork_add_page',
		'access arguments' =>array('create artworks'),
		'weight' => 1,
		'menu_name' => 'management',
		'file' => 'artwork.pages.inc',
	);
	foreach (artwork_types() as $type) {
		$type_url_str = str_replace('_', '-', $type -> type),
		$items['artwork/add/' . $type_url_str] = array(
			'title' => $type->name,
			'title callback' => 'check_plain',
			'page callback' => 'artwork_add',
			'page arguments' => array(2),
			'access arguments' => array('create artwork'),
			'description' => $type -> description,
		);
	}
	
	$items['artwork/%artwork'] = array(
		'title callback' => 'artwork_page_title',
		'title arguments' => array(1),
		'page callback' => 'artwork_page_view',
		'page arguments' => array(1),
		'access arguments' => array('view artworks'),
		'type' => MENU_CALLBACK,
	);
	$items['artwork/%artwork/view'] = array(
		'title' => 'View',
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'weight' => -10,
	);
	
	$items['artwork/%artwork/edit'] = array(
		'title' => 'Edit',
		'page callback' => 'artwork_page_edit',
		'page arguments' => array(1),
		'access arguments' => array('update artworks'),
		'weight' => 0,
		'type' => MENU_LOCAL_TASK,
		'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
	);
	
	$items['artwork/%artwork/delete'] = array(
		'title' => 'Delete',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('artwork_delete_confirm', 1),
		'access arguments' => array('delete artworks'),
		'weight' => 1,
		'type' => MENU_LOCAL_TASK,
		'context' => MENU_CONTEXT_INLINE,
	);

	$items['admin/structure/artworks'] = array(
		'title' => 'Manage artworks',
		'description' => 'Manage artworks.',
		'page callback' => 'artwork_overview_types',
		'access arguments' => array('administer artworks'),
	);
	$items['admin/structure/artworks/manage/%artwork_type'] = array(
		'title' => 'View artwork type',
		'title callback' => 'artwork_type_page_title',
		'title arguments' => array(4),
		'page callback' => 'artwork_information',
		'page arguments' => array(4),
		'access arguments' => array('administer artworks'),
	);
	$items['admin/structure/artworks/manage/%artwork_type/view'] = array(
		'title' => 'View',
		'type' => MENU_DEFAULT_LOCAL_TASK,
	);
	return $items;
}

function artwork_type_page_title($type) {
	return t('Manage @type', array('@type' => $type->name));
}

/*************添加Artwork*****************/
function artwork_forms() {
	$forms = array();
	if ($types = artwork_types()) {
		foreach (array_keys($types) as $type) {
			$forms[$type . '_artwork_form']['callback'] = 'artwork_form';
		}
	}
	return $forms;
}
function artwork_save($artwork) {
	return entity_get_controller('artwork')->save($artwork);
}
/*************添加Artwork---end*****************/

/*************查看Artwork*****************/
function artwork_page_title($artwork) {
	return $artwork->title;
}
/*************查看Artwork---end*****************/

/*************删除Artwork*****************/
function artwork_delete($aid) {
	return artwork_delete_multiple(array($aid));
}
function artwork_delete_multiple($aids) {
	return entity_get_controller('artwork')->delete($aids);
}
/*************删除Artwork--end*****************/

/**********************************************/
/**
* "extra_fields"钩子
* 定义每个entity类型和每个bundle
*/
function artwork_field_extra_fields() {
	$extra = array();
	//遍历所有类型并声明这些类型都有一个pseudo-filed标题
	//pseudo-field是当前显示的编辑表格（第一个key）和单显示（第二个key）
	foreach (artwork_types() as $type) {
		$extra['artwork'][$type->type] = array(
			'form' => array(
				'title' => array(
					'label' => t('Title'),
					'description' => t('The name of the artwork'),
					'weight' => -5,
				),
			),
			'display' => array(
				'title' => array(
					'label' => t('Title'),
					'description' => t('The name of the artwork'),
					'weight' => -5,
				),
			),
		);
	}
	return $extra;
}

