/**
 *当module安装时创建表格，删除时删除表格
 */
function artwork_schema() {
	$schema['artwork'] = array(
		'description' => 'The base table for artworks.',
		'fields' => array(
			'aid' => array(
				'description' => 'The primary identifier for an artwork.',
				'type' => 'serial',
				'unsigned' => TRUE,
				'not null' => TRUE,
			),
			'vid' => array(
				'description' => 'The current {artwork_revision}.vid version identifier.',
				'type' => 'int',
				'unsigned' => TRUE,
				'not null' => TRUE,
				'default' => 0,
			),
			'type' => array(
				'description' => 'The {artwork_type} of this artwork.',
				'type' => 'varchar',
				'length' => 32,
				'not null' => TRUE,
				'default' => '',
			),
			'title' => array(
				'description' => 'The title of this artwork.',
				'type' => 'varchar',
				'length' => 255,
				'not null' => TRUE,
				'default' => '',
			),
			'created' => array(
				'description' => 'The Unix timestamp when the artwork was created.',
				'type' => 'int',
				'not null' => TRUE,
				'default' => 0,
			),
			'changed' => array(
				'description' => 'The Unix timestamp when the artwork was most recently saved.',
				'type' => 'int',
				'not null' => TRUE,
				'default' => 0,
			),
		),
		'unique keys' => array(
			'aid_vid' => array('aid', 'vid'),
			'aid' => array('aid')
		),
		'primary key' => array('aid'),
	);
	
	$schema['artwork_revision'] = array(
		'description' => 'Stores information about each saved version of an {artwork}.',
		'fields' => array(
			'aid' => array(
				'description' => 'The {artwork} this version belongs to.',
				'type' => 'int',
				'unsigned' => TRUE,
				'not null' => TRUE,
				'default' => 0,
			),
			'vid' => array(
				'description' => 'The primary identifier for this version.',
				'type' => 'serial',
				'unsigned' => TRUE,
				'not null' => TRUE,
			),
			'title' => array(
				'description' => 'The title of this version.',
				'type' => 'varchar',
				'length' => 255,
				'not null' => TRUE,
				'default' => '',
			),
			'created' => array(
				'description' => 'The Unix timestamp when the artwork was created.',
				'type' => 'int',
				'not null' => TRUE,
				'default' => 0,
			),
		),
		'indexes' => array(
			'aid' => array('aid'),
		),
		'primary key' => array('vid'),
		'foreign keys' => array(
			'artwork' => array(
				'table' => 'artwork',
				'columns' => array('aid' => 'aid',),
			),
		),
	);
	return $schema;
}

/**
* Implements hook_entity_info().
* 描述entity type
*/
function artwork_entity_info() {
	$return['artwork'] = array(
		'label' => t('Artwork'),//the name should be show to the user
		'controller class' => 'ArtworkController',
		'base table' => 'artwork',//主表
		'revision table' => 'artwork_revision',//存储版本列表
		'uri callback' => 'artwork_uri',
		'fieldable' => TRUE,
		'entity keys' => array(
			'id' => 'aid',//主表主键
			'revision' => 'vid',//版本列表主键
			'bundle' => 'type',//表示每个bundle的主键
			'label' => 'title',//artwork的显示名字
		),
		'bundle keys' => array(
			'bundle' => 'type',
		),
		'static cache' => TRUE,
		'bundles' => array(),
		'view modes' => array(//entity的不同显示模式
			'full' => array(
				'label' => t('Full content'),
				'custom settings' => FALSE,//是否允许Field UI为默认显示模式分别配置格式化字段
			),
			'teaser' => array(
				'label' => t('Teaser'),
				'custom settings' => FALSE,
			),
		),
	);
	foreach (artwork_types() as $type => $info) {
		$return['artwork']['bundles'][$type] = array(
			'label' => $info -> name,
			'admin' => array(
				'path' => 'admin/structure/artworks/manage/%artwork_type',
				'real path' => 'admin/structure/artworks/manage/' . str_replace('_', '-', $type),
				'bundle argument' => 4,
				'access arguments' => array('administer artworks'),
			),
		);
	}
	return $return;//$return has a single entry, artwork
}


function artwork_uri($artwork) {
	return array(
		'path' => 'artwork/' . $artwork->aid,
	);
}

/**
 * artwork type object必须：
 * 		a.是一个对象
 * 		b.与hook_entity_info()里定义的bundle键匹配
 */
function artwork_types() {
	$types = &drupal_static(__FUNCTION__);
	if (empty($types)) {
		$types['painting'] = (object)array(
			'type' => 'painting',
			'name' => t('Painting'),
			'description' => t('A picture made with paint.')
		);
		$types['sculpture'] = (object)array(
			'type' => 'sculpture',
			'name' => t('Sculpture'),
			'description' => t('A carving made out of stone or wood.')
		);
	}
	return $types;//artwork类型对象列表(stdClass PHP object，包含每个bundle的相关信息)
}
/**
 * 菜单placeholder工作的必要函数
 */
function artwork_type_load($type) {
	$types = artwork_types();
	$type = str_replace('-', '_', $type);
	return isset($types[$type]) ? $types[$type] : FALSE;
}

function artwork_load($aid = NULL, $vid = NULL, $reset = FALSE) {
	$aids = (isset($aid) ? array($aid) : array());
	$conditions = (isset($vid) ? array('vid' => $vid) : array());
	$artwork = artwork_load_multiple($aids, $conditions, $reset);
	return $artwork ? reset($artwork) : FALSE;
}
function artwork_load_multiple($aids = array(), $conditions = array(),
								$reset = FALSE) {
	return entity_load('artwork', $aids, $conditions, $reset);
}

function artwork_menu() {
	$items['admin/structure/artworks'] = array(
		'title' => 'Manage artworks',
		'description' => 'Manage artworks.',
		'page callback' => 'artwork_overview_types',
		'access arguments' => array('administer artworks'),
	);
	$items['admin/structure/artworks/manage/%artwork_type'] = array(
		'title' => 'View artwork type',
		'title callback' => 'artwork_type_page_title',
		'title arguments' => array(4),
		'page callback' => 'artwork_information',
		'page arguments' => array(4),
		'access arguments' => array('administer artworks'),
	);
	$items['admin/structure/artworks/manage/%artwork_type/view'] = array(
		'title' => 'View',
		'type' => MENU_DEFAULT_LOCAL_TASK,
	);
	return $items;
}

function artwork_overview_types() {
	foreach (artwork_types() as $type => $info) {
		$type_url_str = str_replace('_', '-', $type);
		$label = t('View @type', array('@type' => $info->name));
		$items[] = l($label, 'admin/structure/artworks/manage/' . $type_url_str);
	}
	return theme('item_list', array('items' => $items));
}

function artwork_type_page_title($type) {
	return t('Manage @type', array('@type' => $type->name));
}

function artwork_information($artwork_type) {
	return $artwork_type->name . ': ' . $artwork_type->description;
}

