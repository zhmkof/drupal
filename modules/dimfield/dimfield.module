<?php

function dimfield_field_info() {
	return array(
		'dimensions' => array(
			'label' => t('Dimensions'),
			'description' => t('This field stores a height and width, and depth.'),
			//定义数组，指定field和默认值
			'settings' => array('num_dimensions' => 2),
			'instance_settings' => array(
				'max_height' => 0,
				'max_width' => 0,
				'max_depth' => 0,
			),
			//widget和formatter应用于一个field，当用户指定一个
			'default_widget' => 'dimfield_combined',
			'default_formatter' => 'dimfield_default',
		),
	);
}

function dimfield_field_is_empty($item, $field) {
	if ($field['type'] == 'dimensions') {
		if (empty($item['height']) && empty($item['width']) &&
			($field['settings']['num_dimensions'] == 2 ||
			empty($item['depth'])))
		{
			return TRUE;
		}
	}
	return FALSE;
}

function dimfield_field_settings_form($field, $instance, $has_data) {
	if ($field['type'] == 'dimensions') {
		$settings = $field['settings'];
		$form['num_dimensions'] = array(
			'#type' => 'select',
			'#title' => t('How many dimensions'),
			'#options' => array(
				2 => t('Height and width'),
				3 => t('Height, width, and depth'),
			),
			'#default_value' => $settings['num_dimensions'],
			'#required' => FALSE,
			'#description' => t('Is this for a 2-dimensional or 3-dimensional object?'),
		);
		return $form;
	}
}

function dimfield_field_validate($obj_type, $object, $field,
								 $instance, $langcode, &$items,
								 &$errors) {
	if ($field['type'] == 'dimensions')'' {
		$columns = array(
			'height' => 'max_height',
			'width' => 'max_width',
		);
		if ($field['settings']['num_dimensions'] == 3) {
			$columns['depth'] = 'max_depth';
		}
		foreach ($items as $delta => $item) {
			foreach ($columns as $column => $max_key) {
				if ($instance['settings'][$max_key] &&
						!empty($item[$column]) &&
						$item[$column] > $instance['settings'][$max_key]) {
					$errors[$field['field_name']][$delta][] = array(
						'error' => 'dimfield_' . $max_key,
						'message' => t(
										'%name: The %column may not be larger than %max.',
										array('%column' => $column,
												'%name' => $instance['label'],
												'%max' => $instance['settings'][$max_key],
												''x)
										),
					);
				}
			}
		}
	}
}

/**
* define two form widgets
*/
function dimfield_field_widget_info() {
	return array(
		'dimfield_simple' => array(
			'label' => t('Separate text fields'),
			'description' => t('Allow the user to enter each dimension separately.'),
			'field types' => array('dimensions'),
			'behaviors' => array(
				'multiple values' => FIELD_BEHAVIOR_DEFAULT,
				'default value' => FIELD_BEHAVIOR_DEFAULT,
			),
		),
		'dimfield_combined' => array(
			'label' => t('Combined text field'),
			'description' => t('Allow the user to enter all dimensions together.'),
			'field types' => array('dimensions'),
			'settings' => array('size' => 10),
			'behaviors' => array(
				'multiple values' => FIELD_BEHAVIOR_DEFAULT,
				'default value' => FIELD_BEHAVIOR_DEFAULT,
			),
		),
	);
}

/**
* @param undefined $unit
* get a consistent list of units we support anywhere we need it,
* plus it provides an easy mapping from the "internal name" of
* a unit to a translated human-friendly name.
*/
function dimfield_units($unit = NULL) {
	static $units;
	
	if (empty($units)) {
		$units = array(
			'inches' => t('Inches'),
			'feet' => t('Feet'),
			'meters' => t('Meters'),
		);
	}
	
	if ($unit) {
		return isset($units[$unit]) ? $units[$unit] : '';
	}
	return $units;
}

function dimfield_field_widget_settings_form($field, $instance) {
	$form = array();
	$widget = $instance['widget'];
	$settings = $widget['settings'];

	if ($widget['type'] == 'dimfield_combined') {
		$form['size'] = array(
			'#type' => 'textfield',
			'#title' => t('Size of textfield'),
			'#default_value' => $settings['size'],
			'#required' => TRUE,
			'#element_validate' => array('_element_validate_integer_positive'),
		);
	}
	return $form;
}

/**
* @param undefined $form
* @param undefined $form_state
* @param undefined $field
* @param undefined $instance
* @param undefined $langcode
* @param undefined $items
* @param undefined $delta
* @param undefined $element
* 为dimensions创建两个或者三个表格元素
* 另外i，创建一个选择框，为了设置units（用简单的utility函数提供可用的units）
*/
function dimfield_field_widget_form(&$form, &$form_state, $field,
									$instance, $langcode, $items,
									$delta, $element) {
	$base = $element;

	//定义表格元素的默认值
	if ($instance['widget']['type'] == 'dimfield_simple') {
		$element['height'] = array(
			'#type' => 'textfield',
			'#title' => t('Height'),
			'#default_value' => isset($items[$delta]['height']) ?
									$items[$delta]['height'] : NULL,
		) + $base;
		
		$element['width'] = array(
			'#type' => 'textfield',
			'#title' => t('Width'),
			'#default_value' => isset($items[$delta]['width']) ?
									$items[$delta]['width'] : NULL,
		) + $base;
		
		if ($field['settings']['num_dimensions'] == 3) {
			$element['depth'] = array(
				'#type' => 'textfield',
				'#title' => t('Depth'),
				'#default_value' => isset($items[$delta]['depth']) ?
										$items[$delta]['depth'] : NULL,
			) + $base;
		}
		
		$element['units'] = array(
			'#type' => 'select',
			'#title' => t('Units'),
			'#default_value' => isset($items[$delta]['units']) ?
									$items[$delta]['units'] : NULL,
			'#options' => dimfield_units(),
		);
	} elseif ($instance['widget']['type'] == 'dimfield_combined') {
		//自定义校验函数
		$element['#element_validate'] = array('_dimfield_combined_validate');
		
		$default = NULL;
		if (isset($items[$delta])) {
			$item = $items[$delta];
			if (isset($item['height'], $item['width'])) {
				$default = $item['height'] . 'x' . $item['width'];
				if ($field['settings']['num_dimensions'] == 3) {
					$default .= 'x' . $item['depth'];
				}
			}
		}
		
		//告诉渲染系统使用名字为dimfield_combined_wrapper的样式钩子去渲染所有
		//名字包含'dimfield_combined_wrapper'的widget？
		$element['dimfield_combined_wrapper']['#theme'] = 'dimfield_combined_wrapper';
		//告诉系统每当显示此表格元素时都加载此CSS文件
		$element['dimfield_combined_wrapper']['#attached']['css'][] = drupal_get_path('module', 'dimfield') . '/dimfield-admin.css';
			
		$element['dimfield_combined_wrapper']['height_width_depth'] = array(
			'#type' => 'textfield',
			'#default_value' => $default,
			'#size' => $instance['widget']['settings']['size'],
		) + $base;

		$element['dimfield_combined_wrapper']['units'] = array(
			'#type' => 'select',
			'#title' => t('Units'),
			'#default_value' => isset($items[$delta]['units']) ?
									$items[$delta]['units'] : NULL,
			'#options' => dimfield_units(),
		);
	}
	
	return $element;
}

function _dimfield_combined_validate($element, &$form_state) {
	// This function is also called when submitting the field
	// configuration form. If so, skip validation as it
	// won't work anyway.
	if ($form_state['complete form']['#form_id'] == 'field_ui_field_edit_form') {
		return;
	}
	$values = $form_state['values'];
	
	$language = $values['language'];
	$field_name = $element['#field_name'];
	
	$num_dimensions = 2;
	if (array_search('depth', $element['#columns'])) {
		$num_dimensions = 3;
	}
	
	foreach ($values[$field_name][$language] as $delta => $item) {
		if (substr_count($item['dimfield_combined_wrapper']['height_width_depth'], 'x') == $num_dimensions - 1) {
			if ($num_dimensions == 2) {
				list($height, $width) = explode(
					'x',
					$item['dimfield_combined_wrapper']['height_width_depth']
				);
				$new_values = array(
					'height' => trim($height),
					'width' => trim($width),
					'units' => $item['dimfield_combined_wrapper']['units'],
				);
			} elseif ($num_dimensions == 3) {
				list($height, $width, $depth) = explode(
					'x',
					$item['dimfield_combined_wrapper']['height_width_depth']
				);
				$new_values = array(
					'height' => trim($height),
					'width' => trim($width),
					'depth' => trim($depth),
					'units' => $item['dimfield_combined_wrapper']['units'],
				);
			}
			form_set_value($element, $new_values, $form_state);
		} else {
			form_set_error(
				$field_name,
				t('You must specify all dimensions, separated by an \'x\'.')
			);
		}
	}
}

function dimfield_theme(){
	return array(
		'dimfield_combined_wrapper' => array(
			'render element' => 'element',
		),
	);
}

function theme_dimfield_combined_wrapper($variables) {
	$element = $variables['element'];
	
	$hwd = drupal_render($element['height_width_depth']);
	$units = drupal_render($element['units']);
	
	return <<<END
	<div class="clearfix">
	<div class="dimfield-combined">{$hwd}</div>
	<div class="dimfield-units">{$units}</div>
	</div>
END;
}

///////////////// Formatters ///////////////////////

/**
* 定义了两个formatter
*/
function dimfield_field_formatter_info() {
	return array(
		'dimfield_default' => array(
			'label' => t('Default'),//可阅读名称
			'field types' => array('dimensions'),//作用于的field类型列表
		),
		'dimfield_table' => array(
			'label' => t('Show as table'),
			'field types' => array('dimensions'),
			'settings' => array('units_as' => 'column'),
		),
	);
}

/**
* @param undefined $obj_type
* @param undefined $object
* @param undefined $field
* @param undefined $instance
* @param undefined $langcode
* @param undefined $items
* @param undefined $display
* 返回主题系统能理解的可渲染数组
*/
function dimfield_field_formatter_view($obj_type, $object, $field,
										$instance, $langcode, $items,
										$display) {
	$element = array();//转义成HTML字符串后的数组
	$settings = $display['settings'];
	
	switch ($display['type']) {
		case 'dimfield_default':
			foreach ($items as $delta => $item) {
				if ($field['settings']['num_dimensions'] == 2) {
					$output = t('@height @unit by @width @unit', array(
						'@height' => $item['height'],
						'@width' => $item['width'],
						'@unit' => dimfield_units($item['units']),
					));
				} elseif ($field['settings']['num_dimensions'] == 3) {
					$output = t(
						'@height @unit by @width @unit by @depth @unit',
						array(
							'@height' => $item['height'],
							'@width' => $item['width'],
							'@depth' => $item['depth'],
							'@unit' => dimfield_units($item['units']),
						)
					);
				}
				$element[$delta] = array('#markup' => $output);
			}
			break;
		
		case 'dimfield_table':
			//每个row都是个数组，所有row数组组成的数组即是个表格结构
			//将会渲染成表格，用#theme key定义，因为Drupal定义theme_table()函数，
			//当元素已经渲染且返回HTML表格，此数据将会传送进去，
			$rows = array();
			foreach ($items as $delta => $item) {
				$row = array();
				
				if ($settings['units_as'] == 'cell') {
					$row[] = t('@value (%units)', array(
						'@value' => $item['height'],
						'%units' => dimfield_units($item['units']),
					));
					$row[] = t('@value (%units)', array(
						'@value' => $item['width'],
						'%units' => dimfield_units($item['units']),
					));
				} else {
					$row[] = $item['height'];
					$row[] = $item['width'];
				}
				
				if ($field['settings']['num_dimensions'] == 3) {
					if ($settings['units_as'] == 'cell') {
						$row[] = t('@value (%units)', array(
							'@value' => $item['depth'],
							'%units' => dimfield_units($item['units']),
						));
					}
					else {
						$row[] = $item['depth'];
					}
				}
				if ($settings['units_as'] == 'column') {
					$row[] = dimfield_units($item['units']);
				}
				$rows[] = $row;
			}
			
			$header = array(t('Height'), t('Width'));
			if ($field['settings']['num_dimensions'] == 3) {
				$header[] = t('Depth');
			}
			if ($settings['units_as'] == 'column') {
				$header[] = t('Units');
			}
			$element = array(
				'#theme' => 'table',
				'#rows' => $rows,
				'#header' => $header,
			);
			break;
	}
	return $element;
}

function dimfield_field_formatter_settings_form($field, $instance, $view_mode,
												$form, &$form_state) {
	$display = $instance['display'][$view_mode];
	$settings = $display['settings'];
	$form = array();
	if ($display['type'] == 'dimfield_table') {
		$form['units_as'] = array(
			'#title' => t('Show units'),
			'#type' => 'select',
			'#options' => array(
				'column' => t('As their own column'),
				'cell' => t('In each cell'),
				'none' => t('Do not show units'),
			),
			'#default_value' => $settings['units_as'],
			'#required' => TRUE,
		);
	}
	return $form;
}
/**
* @param undefined $field
* @param undefined $instance
* @param undefined $view_mode
* 根据setting返回数组，让Drupal能显示给用户当前的设置情况
*/
function dimfield_field_formatter_settings_summary($field, $instance, $view_mode) {
	$display = $instance['display'][$view_mode];
	$settings = $display['settings'];
	$summary = '';
	if ($display['type'] == 'dimfield_table') {
		if ($settings['units_as'] == 'column') {
			$summary = t('Show units as their own column');
		} else if ($settings['units_as'] == 'cell') {
			$summary = t('Show units in each cell');
		} else if ($settings['units_as'] == 'none') {
			$summary = t('Do not show units');
		}
	}
	return $summary;
}

function dimfield_field_formatter_view($obj_type, $object, $field,
										$instance, $langcode, $items, $display) {
	$element = array();
	$settings = $display['settings'];
	switch ($display['type']) {
	// ...
	case 'dimfield_table':
	$rows = array();
	foreach ($items as $delta => $item) {
	$row = array();
	if ($settings['units_as'] == 'cell') {
	$row[] = t('@value (%units)', array(
	'@value' => $item['height'],
	'%units' => dimfield_units($item['units']),
	));
	$row[] = t('@value (%units)', array(
	'@value' => $item['width'],
	'%units' => dimfield_units($item['units']),
	));
	}
	else {
	$row[] = $item['height'];
	$row[] = $item['width'];
	}
	if ($field['settings']['num_dimensions'] == 3) {
	if ($settings['units_as'] == 'cell') {
	$row[] = t('@value (%units)', array(
	'@value' => $item['depth'],
	'%units' => dimfield_units($item['units']),
	));
	}
	else {
	$row[] = $item['depth'];
	}
	}
	if ($settings['units_as'] == 'column') {
	$row[] = dimfield_units($item['units']);
	}
	$rows[] = $row;
	}
	$header = array(t('Height'), t('Width'));
	if ($field['settings']['num_dimensions'] == 3) {
	$header[] = t('Depth');
	}
	if ($settings['units_as'] == 'column') {
	$header[] = t('Units');
	}
	$element = array(
	'#theme' => 'table',
	'#rows' => $rows,
	'#header' => $header,
	);
	break;
	}
	return $element;
}